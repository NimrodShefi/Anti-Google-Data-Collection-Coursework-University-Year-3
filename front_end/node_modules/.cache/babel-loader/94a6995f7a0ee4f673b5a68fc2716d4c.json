{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n    /**\n     * Base64url encoding strategy.\n     */\n\n    var Base64url = C_enc.Base64url = {\n      /**\n       * Converts a word array to a Base64url string.\n       *\n       * @param {WordArray} wordArray The word array.\n       *\n       * @param {boolean} urlSafe Whether to use url safe\n       *\n       * @return {string} The Base64url string.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n       */\n      stringify: function (wordArray) {\n        let urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = urlSafe ? this._safe_map : this._map; // Clamp excess bits\n\n        wordArray.clamp(); // Convert\n\n        var base64Chars = [];\n\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        } // Add padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n       * Converts a Base64url string to a word array.\n       *\n       * @param {string} base64Str The Base64url string.\n       *\n       * @param {boolean} urlSafe Whether to use url safe\n       *\n       * @return {WordArray} The word array.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n       */\n      parse: function (base64Str) {\n        let urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = urlSafe ? this._safe_map : this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        } // Ignore padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        } // Convert\n\n\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n      },\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n      _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n    };\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          var bitsCombined = bits1 | bits2;\n          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n  return CryptoJS.enc.Base64url;\n});","map":{"version":3,"sources":["C:/Users/c1989618/Documents/term_1/coursework/project/front_end/node_modules/crypto-js/enc-base64url.js"],"names":["root","factory","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","WordArray","C_enc","enc","Base64url","stringify","wordArray","urlSafe","words","sigBytes","map","_safe_map","_map","clamp","base64Chars","i","byte1","byte2","byte3","triplet","j","push","charAt","paddingChar","length","join","parse","base64Str","base64StrLength","reverseMap","_reverseMap","charCodeAt","paddingIndex","indexOf","parseLoop","nBytes","bits1","bits2","bitsCombined","create"],"mappings":"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","sourcesContent":[";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64url encoding strategy.\n\t     */\n\t    var Base64url = C_enc.Base64url = {\n\t        /**\n\t         * Converts a word array to a Base64url string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {string} The Base64url string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray, urlSafe=true) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64url string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64url string.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n\t         */\n\t        parse: function (base64Str, urlSafe=true) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                reverseMap = this._reverseMap = [];\n\t                for (var j = 0; j < map.length; j++) {\n\t                    reverseMap[map.charCodeAt(j)] = j;\n\t                }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t        var words = [];\n\t        var nBytes = 0;\n\t        for (var i = 0; i < base64StrLength; i++) {\n\t            if (i % 4) {\n\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t                var bitsCombined = bits1 | bits2;\n\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t                nBytes++;\n\t            }\n\t        }\n\t        return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\treturn CryptoJS.enc.Base64url;\n\n}));"]},"metadata":{},"sourceType":"script"}